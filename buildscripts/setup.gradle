def renameConfig = [
        templateName             : "template",
        templateAppId            : "template.app.id",
        templateMaterialThemeName: "TemplateTheme",
        newPackage               : "domain.yourname.app",
        newProjectName           : "Your Project",
        newMaterialThemeName     : "MyMaterialTheme",
        useHiltDependencies      : true,
        useRoomDependencies      : true,
        useRetrofitDependencies  : true,
]

tasks.register('deleteSetupCode') {
    def workflowsFolder = "${rootDir}/.github/workflows"
    def buildscriptsFolder = "${rootDir}/buildscripts"
    def templateChangeWorkflowFile = "$workflowsFolder/template_change_test.yml"
    def setupGradle = "$buildscriptsFolder/setup.gradle"
    def renovateFile = "${rootDir}/renovate.json"

    doLast {
        removeTextFromFile("${rootDir}/build.gradle.kts", "setup.gradle")
        delete(templateChangeWorkflowFile)
        delete(setupGradle)
        delete(renovateFile)
    }
}

tasks.register('renameAppPackage', Copy) {
    description "Renames the template package in the app module."
    group null

    def newPackageAsDirectory = renameConfig.newPackage.replaceAll("\\.", "/")
    def startingDirectory = "${rootDir}/app/src/main/java/${renameConfig.templateName}"
    def endingDirectory = "${rootDir}/app/src/main/java/${newPackageAsDirectory}"

    from(startingDirectory)
    into(endingDirectory)

    // Replace package statements
    filter { line ->
        line.replaceAll("package ${renameConfig.templateName}",
            "package ${renameConfig.newPackage}")
    }

    // Replace import statements
    filter { line ->
        line.replaceAll("import ${renameConfig.templateName}",
            "import ${renameConfig.newPackage}")
    }

    // Replace Theme references. We can just replace on name,
    // which covers both imports and function calls.
    filter { line ->
        line.replaceAll("${renameConfig.templateMaterialThemeName}",
            "${renameConfig.newMaterialThemeName}")
    }

    doLast {
        delete(startingDirectory)
    }
}

tasks.register('replaceTemplateReferences') {
    description "Replaces references to template in various files."
    group null

    doLast {
        // README file
        replaceTextInFile("${rootDir}/README.md",
            "android-${renameConfig.templateName}",
            "${renameConfig.newProjectName}",
        )

        replaceTextInFile("${rootDir}/app/src/main/AndroidManifest.xml",
            "${renameConfig.templateName}.MainActivity",
            "${renameConfig.newPackage}.MainActivity",
        )

        replaceTextInFile("${rootDir}/app/src/main/AndroidManifest.xml",
            "${renameConfig.templateName}.initializers",
            "${renameConfig.newPackage}.initializers",
        )

        replaceTextInFile("${rootDir}/app/build.gradle.kts",
            "namespace = \"${renameConfig.templateName}\"",
            "namespace = \"${renameConfig.newPackage}\"",)

        replaceTextInFile("${rootDir}/app/build.gradle.kts",
            "applicationId = \"${renameConfig.templateAppId}\"",
            "applicationId = \"${renameConfig.newPackage}\"",)

        replaceTextInFile("${rootDir}/settings.gradle.kts",
            "rootProject.name = \"${renameConfig.templateName}\"",
            "rootProject.name = \"${renameConfig.newProjectName}\"",)

        replaceTextInFile("${rootDir}/app/src/main/res/values/strings.xml",
            "<string name=\"app_name\">${renameConfig.templateName}</string>",
            "<string name=\"app_name\">${renameConfig.newProjectName}</string>",)

        replaceTextInFile("${rootDir}/app/src/main/res/values/strings.xml",
            "<string name=\"app_name\">${renameConfig.templateName}</string>",
            "<string name=\"app_name\">${renameConfig.newProjectName}</string>",)

        // Update the theme name in the themes.xml file
        replaceTextInFile("${rootDir}/app/src/main/res/values/themes.xml",
            "${renameConfig.templateMaterialThemeName}",
            "${renameConfig.newMaterialThemeName}",
        )

        replaceTextInFile("${rootDir}/app/src/main/AndroidManifest.xml",
            "@style/Theme.${renameConfig.templateMaterialThemeName}",
            "@style/Theme.${renameConfig.newMaterialThemeName}",
        )
    }
}

tasks.register('keepOrRemoveDependencies') {
    description "Keeps or removes certain dependencies defined in renameConfig."
    group null

    doLast {
        def filesWithDependencies = ["${rootDir}/build.gradle.kts",
                                     "${rootDir}/app/build.gradle.kts",
                                     "${rootDir}/gradle/libs.versions.toml",]

        filesWithDependencies.each { fileName ->
            if (renameConfig.useHiltDependencies != true) {
                removeTextFromFile(fileName, "hilt")
            }

            if (renameConfig.useRoomDependencies != true) {
                removeTextFromFile(fileName, "room")
            }

            if (renameConfig.useRetrofitDependencies != true) {
                removeTextFromFile(fileName, "retrofit")
                removeTextFromFile(fileName, "moshi")
            }
        }
    }
}

tasks.register('renameTemplate') {
    description "Runs all of the necessary template setup tasks based on the renameConfig."
    group "Template Setup"

    dependsOn(
        keepOrRemoveDependencies,
        renameAllModules,
        renameAppPackage,
        replaceTemplateReferences,
        deleteSetupCode,
    )

    doLast {
        exec {
            // After all setup changes happen, run a `git add` so
            // folks can just immediately commit and push if they wish.
            commandLine "git", "add", "${rootDir}/."
        }
    }
}

/**
 * Replaces all instances of [text] in a given [fileName].
 */
static def replaceTextInFile(fileName, originalText, newText) {
    def file = new File(fileName)

    file.text = file.text.replaceAll(originalText, newText)
}

/**
 * Removes all lines from the given fileName that contain some supplied text.
 */
static def removeTextFromFile(fileName, text) {
    def file = new File(fileName)
    List fileLines = file.readLines()
    file.text = ""
    fileLines.each { line ->
        if (!line.contains(text)) {
            file.append(line)
            file.append("\n")
        }
    }
}

def subModules = ['di', 'api', 'shared-resources']
subModules.each { subModule ->
    renameModule(renameConfig, subModule)
    updateNamespaceForModule(renameConfig.newPackage, subModule)
}

def renameModule(renameConfig, subModule) {
    tasks.register("rename${subModule}Package", Copy) {
        description "Renames the template package in the $subModule module."
        group null

        def newPackageAsDirectory = renameConfig.newPackage.replaceAll("\\.", "/")
        def startingDirectory = "${rootDir}/modules/${subModule}/src/main/java/template"
        def endingDirectory = "${rootDir}/modules/${subModule}/src/main/java/${newPackageAsDirectory}"

        from(startingDirectory)
        into(endingDirectory)

        filter { line ->
            line.replaceAll("package ${renameConfig.templateName}", "package ${renameConfig.newPackage}")
        }

        filter { line ->
            line.replaceAll("import ${renameConfig.templateName}", "import ${renameConfig.newPackage}")
        }

        filter { line ->
            line.replaceAll("${renameConfig.templateMaterialThemeName}", "${renameConfig.newMaterialThemeName}")
        }

        doLast {
            delete(startingDirectory)
        }
    }
}

def updateNamespaceForModule(namespace, moduleName) {
    tasks.register("update${moduleName}Namespace") {
        description "Updates the namespace for the $moduleName module."
        group null

        doLast {
            def buildGradleKts = file("${rootDir}/modules/$moduleName/build.gradle.kts")
            buildGradleKts.text = buildGradleKts.text.replaceAll("namespace = \"[^\"]*\"", "namespace = \"$namespace.${moduleName.replace('-', '.')}\"")
        }
    }
}

tasks.register('renameAllModules') {
    description "Runs the package and namespace renaming tasks for all sub-modules."
    group null

    subModules.each { subModule ->
        dependsOn("rename${subModule}Package", "update${subModule}Namespace")
    }
}